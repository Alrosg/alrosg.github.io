---
// src/pages/vbmeta-tool.astro
import MainGridLayout from '/src/layouts/MainGridLayout.astro';

const title = "VBMeta 工具";
const description = "批量处理禁用校验的 vbmeta 镜像文件";
---

<MainGridLayout {title} {description}>
  <div class="container">
    <h1>{title}</h1>
    <p>{description}</p>
    
    <div class="tool-container">
      <!-- 左右布局容器 -->
      <div class="two-column-layout">
        <!-- 左侧列：文件上传和列表 -->
        <div class="left-column">
          <!-- 多文件上传区域 -->
          <div class="upload-area" id="dropZone">
            <input type="file" id="fileInput" accept=".img,.bin" multiple style="display: none;">
            <div class="upload-content">
              <svg class="upload-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
              </svg>
              <p class="upload-text">点击或拖放文件到此处上传</p>
              <p class="upload-hint">支持 .img 和 .bin 格式文件（最多6个）</p>
              <button id="selectFileBtn">选择文件</button>
            </div>
            <div id="fileList" class="file-list"></div>
          </div>
          
          <!-- 选项区域 -->
          <div class="options-section">
            <h3>处理选项</h3>
            <div class="options-grid">
              <label>
                <input type="checkbox" id="disableVerity" checked>
                禁用 Verity (--disable-verity)
              </label>
              <label>
                <input type="checkbox" id="disableVerification" checked>
                禁用 Verification (--disable-verification)
              </label>
            </div>
          </div>
          
          <!-- 处理按钮 -->
          <button id="processBtn" class="process-button" disabled>批量处理文件</button>
        </div>
        
        <!-- 右侧列：控制台和下载 -->
        <div class="right-column">
          <!-- 控制台输出区域 -->
          <div class="console-container">
            <div class="console-header">
              <h3>处理日志</h3>
              <button id="clearConsole" class="clear-button">清空</button>
            </div>
            <div id="consoleOutput" class="console-output"></div>
          </div>
          
          <!-- 下载区域 -->
          <div id="downloadArea" class="download-area" style="display: none;">
            <div class="download-header">
              <h3>下载处理后的文件</h3>
              <button id="downloadAllBtn" class="download-all-button">一键下载全部</button>
            </div>
            <div id="downloadList" class="download-list"></div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- 引入JSZip库用于压缩文件 -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>

  <script>
    // 最大文件数量
    const MAX_FILES = 6;
    
    // 文件处理队列
    let fileQueue = [];
    
    // 存储处理后的文件URLs
    let processedFiles = [];
    
    // 初始化函数 - 使用更可靠的方式
    function initVBMetaTool() {
      console.log('初始化VBMeta工具');
      
      // 使用事件委托来处理动态创建的元素
      document.addEventListener('click', function(e) {
        // 处理移除文件按钮
        if (e.target.classList.contains('remove-file')) {
          const index = parseInt(e.target.getAttribute('data-index'));
          removeFile(index);
        }
        
        // 处理选择文件按钮
        if (e.target.id === 'selectFileBtn') {
          document.getElementById('fileInput').click();
        }
      });
      
      // 文件选择处理
      const fileInput = document.getElementById('fileInput');
      if (fileInput) {
        fileInput.addEventListener('change', handleFileSelection);
      }
      
      // 拖放功能
      const dropZone = document.getElementById('dropZone');
      if (dropZone) {
        // 防止默认拖放行为
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
          dropZone.addEventListener(eventName, preventDefaults, false);
        });
        
        // 高亮拖放区域
        ['dragenter', 'dragover'].forEach(eventName => {
          dropZone.addEventListener(eventName, highlight, false);
        });
        
        ['dragleave', 'drop'].forEach(eventName => {
          dropZone.addEventListener(eventName, unhighlight, false);
        });
        
        // 处理拖放文件
        dropZone.addEventListener('drop', handleDrop, false);
      }
      
      // 清空控制台按钮
      const clearConsoleBtn = document.getElementById('clearConsole');
      if (clearConsoleBtn) {
        clearConsoleBtn.addEventListener('click', () => {
          const consoleOutput = document.getElementById('consoleOutput');
          if (consoleOutput) consoleOutput.innerHTML = '';
        });
      }
      
      // 处理按钮点击事件
      const processBtn = document.getElementById('processBtn');
      if (processBtn) {
        processBtn.addEventListener('click', processFiles);
      }
      
      // 一键下载按钮
      const downloadAllBtn = document.getElementById('downloadAllBtn');
      if (downloadAllBtn) {
        downloadAllBtn.addEventListener('click', downloadAllFiles);
      }
      
      console.log('VBMeta工具初始化完成');
    }
    
    // 防止默认拖放行为
    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    // 高亮拖放区域
    function highlight() {
      document.getElementById('dropZone').classList.add('drag-over');
    }
    
    // 取消高亮拖放区域
    function unhighlight() {
      document.getElementById('dropZone').classList.remove('drag-over');
    }
    
    // 处理拖放文件
    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      
      if (files.length) {
        handleDroppedFiles(files);
      }
    }
    
    // 确保DOM完全加载后初始化
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initVBMetaTool);
    } else {
      // DOM已经加载完成，直接初始化
      setTimeout(initVBMetaTool, 100);
    }
    
    // 处理拖放的文件
    function handleDroppedFiles(files) {
      const validFiles = Array.from(files).filter(file => 
        file.name.endsWith('.img') || file.name.endsWith('.bin')
      );
      
      if (validFiles.length === 0) {
        logToConsole('错误：没有有效的.img或.bin文件', 'error');
        return;
      }
      
      // 检查文件数量限制
      const availableSlots = MAX_FILES - fileQueue.length;
      if (validFiles.length > availableSlots) {
        logToConsole(`警告：最多只能上传 ${MAX_FILES} 个文件，已选择 ${availableSlots} 个文件`, 'warning');
        validFiles.splice(availableSlots);
      }
      
      // 添加到文件队列
      fileQueue = [...fileQueue, ...validFiles];
      
      // 更新文件列表显示
      updateFileListDisplay();
      
      // 更新处理按钮状态
      updateProcessButtonState();
    }
    
    function handleFileSelection() {
      const fileInput = document.getElementById('fileInput');
      if (!fileInput) return;
      
      const files = Array.from(fileInput.files);
      
      if (files.length === 0) return;
      
      // 检查文件数量限制
      const availableSlots = MAX_FILES - fileQueue.length;
      if (files.length > availableSlots) {
        logToConsole(`警告：最多只能上传 ${MAX_FILES} 个文件，已选择 ${availableSlots} 个文件`, 'warning');
        files.splice(availableSlots);
      }
      
      // 添加到文件队列
      fileQueue = [...fileQueue, ...files];
      
      // 更新文件列表显示
      updateFileListDisplay();
      
      // 更新处理按钮状态
      updateProcessButtonState();
      
      // 清空文件输入，允许再次选择相同文件
      fileInput.value = '';
    }
    
    function updateFileListDisplay() {
      const fileListDiv = document.getElementById('fileList');
      if (!fileListDiv) return;
      
      fileListDiv.innerHTML = '';
      
      if (fileQueue.length > 0) {
        fileQueue.forEach((file, index) => {
          // 显示文件信息
          const fileItem = document.createElement('div');
          fileItem.className = 'file-item';
          fileItem.innerHTML = `
            <span class="file-name">${file.name}</span>
            <span class="file-size">(${formatFileSize(file.size)})</span>
            <span class="file-status" id="status-${index}">等待处理</span>
            <button class="remove-file" data-index="${index}">×</button>
          `;
          fileListDiv.appendChild(fileItem);
        });
      }
    }
    
    function updateProcessButtonState() {
      const processBtn = document.getElementById('processBtn');
      if (!processBtn) return;
      
      if (fileQueue.length > 0) {
        processBtn.disabled = false;
        processBtn.classList.remove('disabled');
      } else {
        processBtn.disabled = true;
        processBtn.classList.add('disabled');
      }
    }
    
    function removeFile(index) {
      if (index >= 0 && index < fileQueue.length) {
        const removedFile = fileQueue[index].name;
        fileQueue.splice(index, 1);
        updateFileListDisplay();
        updateProcessButtonState();
        logToConsole(`已移除文件: ${removedFile}，剩余文件数: ${fileQueue.length}`, 'info');
      }
    }
    
    async function processFiles() {
      if (fileQueue.length === 0) {
        logToConsole('请先选择文件', 'error');
        return;
      }
      
      // 禁用处理按钮
      const processBtn = document.getElementById('processBtn');
      if (processBtn) {
        processBtn.disabled = true;
        processBtn.classList.add('disabled');
      }
      
      // 清空下载区域
      const downloadArea = document.getElementById('downloadArea');
      const downloadList = document.getElementById('downloadList');
      if (downloadArea) downloadArea.style.display = 'none';
      if (downloadList) downloadList.innerHTML = '';
      
      // 清空已处理文件列表
      processedFiles = [];
      
      // 显示控制台区域
      logToConsole('开始批量处理文件...', 'info');
      
      // 处理每个文件
      for (let i = 0; i < fileQueue.length; i++) {
        const file = fileQueue[i];
        try {
          await processFile(file, i);
        } catch (error) {
          logToConsole(`处理 ${file.name} 失败: ${error.message}`, 'error');
          updateFileStatus(i, '处理失败', 'error');
        }
      }
      
      logToConsole('所有文件处理完成', 'success');
      
      // 重新启用处理按钮
      if (processBtn) {
        processBtn.disabled = false;
        processBtn.classList.remove('disabled');
      }
      
      // 如果有成功处理的文件，显示下载区域
      if (downloadArea && processedFiles.length > 0) {
        downloadArea.style.display = 'block';
      }
    }
    
    async function processFile(file, index) {
      logToConsole(`开始处理文件: ${file.name}`, 'info');
      updateFileStatus(index, '处理中...', 'processing');
      
      // 读取文件
      const arrayBuffer = await file.arrayBuffer();
      logToConsole(`读取文件完成: ${file.name} (${formatFileSize(file.size)})`, 'info');
      
      // 检查文件大小
      if (arrayBuffer.byteLength < 256) {
        throw new Error('文件太小，不是有效的vbmeta镜像');
      }
      
      const dataView = new DataView(arrayBuffer);
      
      // 检查AVB魔数
      const avbMagic = "AVB0";
      for (let i = 0; i < avbMagic.length; i++) {
        if (dataView.getUint8(i) !== avbMagic.charCodeAt(i)) {
          throw new Error('文件格式无效，不是vbmeta镜像');
        }
      }
      
      // 检查当前状态
      const flagsOffset = 123; // vbmeta镜像中flags字段的偏移量
      const currentFlagsByte = dataView.getUint8(flagsOffset);
      const isVerityDisabled = (currentFlagsByte & 0x01) !== 0;
      const isVerificationDisabled = (currentFlagsByte & 0x02) !== 0;
      
      logToConsole(`检测到当前状态: Verity ${isVerityDisabled ? '已禁用' : '已启用'}, Verification ${isVerificationDisabled ? '已禁用' : '已启用'}`, 'info');
      
      // 如果已经禁用，跳过处理
      const disableVerityElem = document.getElementById('disableVerity');
      const disableVerificationElem = document.getElementById('disableVerification');
      
      const disableVerity = disableVerityElem ? disableVerityElem.checked : true;
      const disableVerification = disableVerificationElem ? disableVerificationElem.checked : true;
      
      if ((disableVerity && isVerityDisabled) && (disableVerification && isVerificationDisabled)) {
        logToConsole(`文件 ${file.name} 已经禁用所有校验，无需处理`, 'warning');
        updateFileStatus(index, '无需处理', 'warning');
        return;
      }
      
      // 修改标志位
      let newFlagsByte = currentFlagsByte;
      
      if (disableVerity) {
        newFlagsByte |= 0x01; // 设置第0位 (0000 0001)
      }
      if (disableVerification) {
        newFlagsByte |= 0x02; // 设置第1位 (0000 0010)
      }
      
      dataView.setUint8(flagsOffset, newFlagsByte);
      
      // 创建新文件 - 使用原文件名
      const modifiedBlob = new Blob([arrayBuffer], { type: 'application/octet-stream' });
      const downloadUrl = URL.createObjectURL(modifiedBlob);
      const downloadFilename = file.name; // 直接使用原文件名
      
      // 添加到下载列表
      addToDownloadList(file.name, downloadFilename, downloadUrl);
      
      // 存储处理后的文件信息
      processedFiles.push({
        originalName: file.name,
        downloadName: downloadFilename,
        downloadUrl: downloadUrl,
        blob: modifiedBlob
      });
      
      logToConsole(`文件 ${file.name} 处理成功`, 'success');
      updateFileStatus(index, '处理成功', 'success');
    }
    
    function addToDownloadList(originalName, downloadName, downloadUrl) {
      const downloadList = document.getElementById('downloadList');
      if (!downloadList) return;
      
      const downloadItem = document.createElement('div');
      downloadItem.className = 'download-item';
      downloadItem.innerHTML = `
        <div class="download-info">
          <span class="original-name">${originalName}</span>
        </div>
        <a href="${downloadUrl}" download="${downloadName}" class="download-button">
          下载
        </a>
      `;
      downloadList.appendChild(downloadItem);
      
      // 清理URL对象
      const downloadLink = downloadItem.querySelector('a');
      if (downloadLink) {
        downloadLink.addEventListener('click', () => {
          setTimeout(() => URL.revokeObjectURL(downloadUrl), 100);
        });
      }
    }
    
    // 一键下载所有文件
    async function downloadAllFiles() {
      if (processedFiles.length === 0) {
        logToConsole('没有可下载的文件', 'warning');
        return;
      }
      
      logToConsole('开始打包所有文件...', 'info');
      
      try {
        // 使用JSZip创建ZIP文件
        const zip = new JSZip();
        
        // 添加所有文件到ZIP
        for (const file of processedFiles) {
          zip.file(file.downloadName, file.blob);
        }
        
        // 生成ZIP文件
        const zipContent = await zip.generateAsync({type: 'blob'});
        
        // 创建下载链接
        const zipUrl = URL.createObjectURL(zipContent);
        const zipFilename = 'vbmeta_files.zip';
        
        // 触发下载
        saveAs(zipContent, zipFilename);
        
        logToConsole('所有文件已打包完成并开始下载', 'success');
        
        // 清理URL对象
        setTimeout(() => URL.revokeObjectURL(zipUrl), 100);
      } catch (error) {
        logToConsole(`打包文件失败: ${error.message}`, 'error');
      }
    }
    
    function logToConsole(message, type = 'info') {
      const consoleOutput = document.getElementById('consoleOutput');
      if (!consoleOutput) return;
      
      const logEntry = document.createElement('div');
      logEntry.className = `log-entry ${type}`;
      
      // 添加时间戳
      const now = new Date();
      const timestamp = `[${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}]`;
      
      // 添加日志类型图标
      let icon = 'ℹ️';
      if (type === 'error') icon = '❌';
      else if (type === 'success') icon = '✅';
      else if (type === 'warning') icon = '⚠️';
      else if (type === 'processing') icon = '⏳';
      
      logEntry.innerHTML = `
        <span class="log-timestamp">${timestamp}</span>
        <span class="log-icon">${icon}</span>
        <span class="log-message">${message}</span>
      `;
      
      consoleOutput.appendChild(logEntry);
      
      // 自动滚动到底部
      consoleOutput.scrollTop = consoleOutput.scrollHeight;
    }
    
    function updateFileStatus(index, status, type) {
      const statusElement = document.getElementById(`status-${index}`);
      if (statusElement) {
        statusElement.textContent = status;
        statusElement.className = `file-status ${type}`;
      }
    }
    
    function formatFileSize(bytes) {
      if (bytes < 1024) return bytes + ' B';
      else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
      else return (bytes / 1048576).toFixed(1) + ' MB';
    }
  </script>

  <style>
    :root {
      --primary-color: #8b5cf6;
      --text-primary: #374151;
      --text-secondary: #6b7280;
      --bg-light: #f9fafb;
      --bg-container: #ffffff;
      --border-color: #e5e7eb;
      --success-color: #10b981;
      --error-color: #ef4444;
      --warning-color: #f59e0b;
      --processing-color: #3b82f6;
    }
    
    /* 深色模式变量 - 使用更具体的选择器 */
    .dark .tool-container,
    [data-theme="dark"] .tool-container,
    .theme-github-dark .tool-container,
    .expressive-code-theme-github-dark .tool-container {
      --text-primary: #e5e7eb;
      --text-secondary: #9ca3af;
      --bg-light: #1f2937;
      --bg-container: #111827;
      --border-color: #374151;
    }
    
    /* 如果深色模式是应用于html元素 */
    html.dark .tool-container,
    html[data-theme="dark"] .tool-container,
    html.theme-github-dark .tool-container,
    html.expressive-code-theme-github-dark .tool-container {
      --text-primary: #e5e7eb;
      --text-secondary: #9ca3af;
      --bg-light: #1f2937;
      --bg-container: #111827;
      --border-color: #374151;
    }
    
    .container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 1rem;
    }
    
    .tool-container {
      background: var(--bg-container);
      border-radius: 12px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
      padding: 2rem;
      margin-top: 1.5rem;
      transition: background-color 0.3s ease, color 0.3s ease;
    }
    
    h1, h3, p {
      color: var(--text-primary);
      transition: color 0.3s ease;
    }
    
    /* 左右布局 */
    .two-column-layout {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
    }
    
    @media (max-width: 900px) {
      .two-column-layout {
        grid-template-columns: 1fr;
      }
    }
    
    .left-column {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }
    
    .right-column {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }
    
    .upload-area {
      border: 2px dashed var(--border-color);
      border-radius: 8px;
      padding: 2rem;
      text-align: center;
      background-color: var(--bg-light);
      transition: all 0.3s ease;
      position: relative;
    }
    
    .upload-area.drag-over {
      border-color: var(--primary-color);
      background-color: rgba(139, 92, 246, 0.05);
    }
    
    .upload-content {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    
    .upload-icon {
      width: 48px;
      height: 48px;
      color: var(--primary-color);
      margin-bottom: 1rem;
    }
    
    .upload-text {
      font-weight: 500;
      margin-bottom: 0.5rem;
      color: var(--text-primary);
    }
    
    .upload-hint {
      color: var(--text-secondary);
      font-size: 0.875rem;
      margin-bottom: 1rem;
    }
    
    button {
      background-color: var(--primary-color);
      color: white;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 500;
      transition: background-color 0.2s ease;
    }
    
    button:hover {
      background-color: #7c3aed;
    }
    
    .file-list {
      margin-top: 1.5rem;
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }
    
    .file-item {
      display: flex;
      align-items: center;
      padding: 0.75rem;
      background-color: var(--bg-light);
      border-radius: 6px;
      font-size: 0.875rem;
      border: 1px solid var(--border-color);
      transition: background-color 0.3s ease, border-color 0.3s ease;
    }
    
    .file-name {
      font-weight: 500;
      margin-right: 0.5rem;
      color: var(--text-primary);
    }
    
    .file-size {
      color: var(--text-secondary);
      margin-right: 1rem;
    }
    
    .file-status {
      margin-left: auto;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.75rem;
      font-weight: 500;
      margin-right: 0.5rem;
    }
    
    .file-status.processing {
      background-color: rgba(59, 130, 246, 0.1);
      color: var(--processing-color);
    }
    
    .file-status.success {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--success-color);
    }
    
    .file-status.error {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--error-color);
    }
    
    .file-status.warning {
      background-color: rgba(245, 158, 11, 0.1);
      color: var(--warning-color);
    }
    
    .remove-file {
      background: none;
      border: none;
      color: var(--error-color);
      cursor: pointer;
      font-size: 1.2rem;
      padding: 0;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 4px;
    }
    
    .remove-file:hover {
      background-color: rgba(239, 68, 68, 0.1);
    }
    
    .options-section {
      padding: 1rem;
      background-color: var(--bg-light);
      border-radius: 8px;
      border: 1px solid var(--border-color);
      transition: background-color 0.3s ease, border-color 0.3s ease;
    }
    
    .options-section h3 {
      font-size: 1.25rem;
      margin-bottom: 1rem;
      color: var(--text-primary);
    }
    
    .options-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
    }
    
    .options-grid label {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      cursor: pointer;
      padding: 0.75rem;
      background-color: var(--bg-light);
      border-radius: 6px;
      transition: background-color 0.2s ease;
      border: 1px solid var(--border-color);
      color: var(--text-primary);
    }
    
    .options-grid label:hover {
      background-color: rgba(139, 92, 246, 0.05);
    }
    
    input[type="checkbox"] {
      width: 1.2rem;
      height: 1.2rem;
      accent-color: var(--primary-color);
    }
    
    .process-button {
      width: 100%;
      padding: 1rem;
      font-size: 1.125rem;
      font-weight: 600;
      background-color: var(--success-color);
    }
    
    .process-button:hover {
      background-color: #059669;
    }
    
    .process-button.disabled {
      background-color: #9ca3af;
      cursor: not-allowed;
      opacity: 0.7;
    }
    
    .console-container {
      border: 1px solid var(--border-color);
      border-radius: 8px;
      overflow: hidden;
      background-color: var(--bg-light);
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      transition: background-color 0.3s ease, border-color 0.3s ease;
    }
    
    .console-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.75rem 1rem;
      background-color: var(--bg-light);
      border-bottom: 1px solid var(--border-color);
      transition: background-color 0.3s ease, border-color 0.3s ease;
    }
    
    .console-header h3 {
      margin: 0;
      font-size: 1rem;
      color: var(--text-primary);
    }
    
    .clear-button {
      background: none;
      border: none;
      color: var(--text-secondary);
      cursor: pointer;
      font-size: 0.875rem;
      padding: 0.25rem 0.5rem;
    }
    
    .clear-button:hover {
      color: var(--primary-color);
    }
    
    .console-output {
      height: 300px;
      overflow-y: auto;
      padding: 1rem;
      background-color: #1e293b;
      color: #f1f5f9;
      font-family: monospace;
      font-size: 0.875rem;
      line-height: 1.5;
      flex-grow: 1;
    }
    
    .log-entry {
      padding: 0.25rem 0;
    }
    
    .log-entry.info {
      color: #93c5fd;
    }
    
    .log-entry.success {
      color: #6ee7b7;
    }
    
    .log-entry.error {
      color: #fca5a5;
    }
    
    .log-entry.warning {
      color: #fde68a;
    }
    
    .log-entry.processing {
      color: #93c5fd;
    }
    
    .log-timestamp {
      color: #94a3b8;
      margin-right: 0.5rem;
    }
    
    .log-icon {
      margin-right: 0.5rem;
    }
    
    .download-area {
      background-color: var(--bg-light);
      border-radius: 8px;
      padding: 1.5rem;
      border: 1px solid var(--border-color);
      transition: background-color 0.3s ease, border-color 0.3s ease;
    }
    
    .download-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }
    
    .download-header h3 {
      margin: 0;
      color: var(--text-primary);
    }
    
    .download-all-button {
      background-color: var(--primary-color);
      color: white;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 500;
    }
    
    .download-all-button:hover {
      background-color: #7c3aed;
    }
    
    .download-list {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }
    
    .download-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.75rem;
      background-color: var(--bg-light);
      border-radius: 6px;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
      border: 1px solid var(--border-color);
      transition: background-color 0.3s ease, border-color 0.3s ease;
    }
    
    .download-info {
      display: flex;
      flex-direction: column;
    }
    
    .original-name {
      font-weight: 500;
      font-size: 0.875rem;
      color: var(--text-primary);
    }
    
    .download-button {
      background-color: var(--success-color);
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 4px;
      text-decoration: none;
      font-size: 0.875rem;
      font-weight: 500;
      transition: background-color 0.2s ease;
    }
    
    .download-button:hover {
      background-color: #059669;
    }
  </style>
</MainGridLayout>